Notes on the coredx/examples/hello_csharp code:


Makefiles/Projects:
------------------------
examples/hello_csharp/Makefile 
  - Linux makefile, requires MONO development tools in path

examples/hello_csharp/NMakefile
  - Windows makefile, requires VS C# development tools in path

examples/hello_csharp/hello_csharp.sln
  - Windows VisualStudio solution file (reference hello_pub.csproj and hello_sub.csproj)
  - NOTE:

    1) This is a VS2005 solution, which can be 'converted' to work in VS2008
          (the IDE will prompt for this automatically).

    2) The projects reference several 'generated' files, which do not exist
           until the build is invoked. (for example StringMsg.cs).  
           The IDE will complain about these missing files, but it is ok to 
	   ignore this error, as the files will be generated by the first build.

    3) The 'conversion' process to a newer Visual Studio version may leave the .NET 
       	   Framework version at a default of 2.0.  In order to get the example to 
	   build, you will need to manually update the .NET Framework version to 4.0.

	   To update the project's framework version to 4.0:

	   1) Click on the 'Properties' sheet under the hello_pub project
	   2) Click on the 'Applications' tab on the left side of the properties
	      window
	   3) Select ".NET framework 4" in the 'Target framework' option menu
	   4) A dialog box will pop-up, asking for confirmation about changing the 
	      target framework: click "Yes"

NOTE: 
      For .NET Compact Framework (under WinCE), use the 
      examples/hello_csharp/hello_csharp_ce.sln Solution in Visual Studio.

      Or, you can use the NMakefile as long as the env variables PATH, INCLUDE, LIBPATH, and LIB
      are set up appropriately for the WinCE .NET CF environment.


Building:
-------------
To build with any of the provided makefiles/projectfiles, the CoreDX DDS environment 
   variables must be set properly:

    COREDX_TOP, COREDX_HOST, and COREDX_TARGET.

Windows:
  Using 'nmake':  nmake -f NMakefile
  Using VisualStudio IDE: File->Open ... "hello_csharp.sln"  (Convert if necessary, 
  	then build solution)

Linux:
  make -f Makefile



Running:
------------
Windows:
  Using 'nmake':
     Set the PATH so that the 'dll' files can be located at run-time. (Or copy them to 
     	 the working directory.)
     The necessary libraries are: coredx_csharp.dll and dds_csharp.dll

     set PATH=%PATH%;%COREDX_TOP%\target\%COREDX_TARGET%\lib
     run the exe files directly

  Using VisualStudio IDE:
     The project files are configured to copy the required '.dll' files into the target 
     	 bin directory (either bin/Release or bin/Debug, depending on the build type 
	 selected).
     Therefore, the exe files should run in place without further configuration.


WinCE 6: 
      The WinCE platform does not support environment files, so the LICENSE file must
      be specified some other way. 

      The DomainParticipantFactory.set_license() method is provided for this purpose.
      Call dpf.set_license() prior to other DPF methods.

      You can pass in the full path name of the license file or the full license string.
       
         dpf.set_license("\\my_license.lic");  OR
         dpf.set_license("<LICENSE ....>");

      For example, add this code to hello_sub.cs or hello_pub.cs prior to 
         the create_participant() call:

         ReturnCode_t retval = dpf.set_license("coredx.lic");
         if (retval != ReturnCode_t.RETCODE_OK)
            System.Console.WriteLine("DPF::set_license() error: " + DDS.error(retval));


Linux:
  Set the LD_LIBRARY_PATH and MONO_PATH so that the CoreDX DDS libraries can be located 
      at run-time.  For example:

    export LD_LIBRARY_PATH=${COREDX_TOP}/target/${COREDX_TARGET}/lib:${LD_LIBRARY_PATH}
    export MONO_PATH=${COREDX_TOP}/target/${COREDX_TARGET}/lib:${MONO_PATH}

    should set things properly.

